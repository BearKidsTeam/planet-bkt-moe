<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en"><generator uri="https://gohugo.io/" version="0.78.2">Hugo</generator><title type="html">Planet BKT</title><link href="https://planet.bkt.moe/" rel="alternate" type="text/html" title="HTML"/><link href="https://planet.bkt.moe/atom.xml" rel="self" type="application/atom+xml" title="Atom"/><updated>2020-12-11T15:16:48+00:00</updated><id>https://planet.bkt.moe/</id><entry><title type="html">使用 Godot 进行简单的横板平台游戏开发</title><link href="https://planet.bkt.moe/posts/godot-simple-platformer/?utm_source=atom_feed" rel="alternate" type="text/html" hreflang="en"/><id>https://planet.bkt.moe/posts/godot-simple-platformer/</id><author><name>BLumia</name></author><published>2020-12-11T19:42:03+08:00</published><updated>2020-12-11T19:42:03+08:00</updated><content type="html"><![CDATA[<p>游戏引擎有很多，适用于独立开发者进行 2d 游戏开发的也不少。<a href="https://godotengine.org/">Godot Engine</a> 是一个关注已久的游戏引擎项目，有着非常宽松的授权许可（<a href="https://github.com/godotengine/godot/blob/master/LICENSE.txt">MIT</a>）和看上去还不错的 2d 支持。一直以来想在有机会时做点东西出来，但又感觉真的想做时任何引擎都不熟悉也不是件好事，于是就打算试着使用 Godot 来开发一个简单的横板平台游戏原型来熟悉这个引擎。恰巧也有其它群友对 Godot 感兴趣，于是尽管我的了解程度还不多，也仍打算记录下一些研究过程和结果，以备后续自己查阅和它人参考。</p>
<p>下述的内容此处也附带了<a href="https://code.blumia.cn/blumia/godot-platformer-template">代码仓库链接</a>，这里建议自己拉去仓库并打开，把玩之后再按照你在 Godot 中所看到的项目结构和写法来对照下方的文章，于是我也可以省点截图（</p>
<h3 id="算不上概述的引擎概述">算不上概述的引擎概述</h3>
<p>既然要使用引擎，那么自然希望引擎能够附带一些常用的功能而不再需要玩家自行实现或寻找解决方案。对于这次尝试的需求而言，Godot 有下面这些特性可用：</p>
<ul>
<li>对 2d 像素游戏相对友好，支持直接的 pixel prefect 相机设置和资源导入。</li>
<li>内置 <a href="https://docs.godotengine.org/en/stable/tutorials/2d/using_tilemaps.html">TileMap</a> 以及 Autotile 支持。</li>
<li>相对很友好的 vcs 支持。</li>
</ul>
<p>剩下的自然是一些几乎所有引擎都一定会提供的常用功能了。当然由于这篇文章并不是“教程”性质的文章，所以并不打算把文章提到的内容都详细讲清楚，如果你未曾用过 Godot，这里可以给你一些概览，具体的内容自然还是建议你优先考虑查阅文档。</p>
<p>Godot Engine 使用树形结构来描述场景内对象的层级关系，可以在 Scene 面板查看当前场景内的对象层级关系（场景树），选中其中的节点后也可以在 Inspector 和 Node 面板查看其对象属性和信号与组关系。在必要时，可以将一组节点作为一个新的场景保存，并在其它场景中实例化自己所保存的场景以便复用。</p>
<p>每个场景对象可以对应一个 tscn 文件，记录场景的结构和一些未单独保存的场景文件中的子节点数据。一个 Godot 工程对应一个 godot 扩展名的工程文件，记录了项目的各种参数配置，键位配置，默认场景等信息。由于 tscn 文件、godot 文件等涉及到的引擎相关大都是文本文件，于是相应的对 vcs 也很友好。</p>
<p>每个 Godot 项目对应一个目录（godot 文件所在的目录）作为项目目录，当把所支持的资源文件放置到项目目录下时，资源会被自动导入到项目中以供使用。已经导入的资源即可在 FileSystem 面板看到，并在代码中通过 <code>res://</code> 协议的 url 进行访问，在 .import 目录也会有对应的数据生成（不需要 check-in 到 vcs 中）。导入会使用默认配置，当默认配置不符合需求时，则可以在文件视图中选取对应的文件，并在 Import 面板中调整设置并进行重新导入。</p>
<p><img src="/images/import-pixel.png" alt="使用 2D Pixel 预设重新导入素材"></p>
<p>我们的目标游戏原型是像素游戏，默认的图片素材导入选项并不适合，故对于我们的像素游戏素材，则需要进行这样的操作，在把素材放进去后，选中并直接使用 2D Pixel 预设重新导入即可。</p>
<p>我们使用 KinematicBody2D 节点来表示玩家对象，此节点下放置了 Sprite 节点来放置 Sprite，以及 CollitionShape2D 节点标记碰撞盒，然后将这个 KinematicBody2D 玩家节点保存为独立的场景，以便后续导入关卡场景使用。我们的关卡场景则是 Node2D 下只放置了一个 TileMap 节点，然后链接的形式把单独存储的玩家节点也实例化在了测试关卡场景中。TileMap 这里随便用 GIMP 瞎画了一个，然后使用 TileMap 的 TileSet 功能选择我们的文件并配置 Autotile，设置恰当的 Collition 和 BitMask，完毕之后就可以直接在 Godot 内绘制关卡的结构原型了。</p>
<p><img src="/images/bitmask.png" alt="此项目中对应 tile set 的 bitmask"></p>
<p>Godot 使用类似 python 风格的 GDScript 脚本语言来使开发人员编程控制游戏逻辑（也可选择 Godot VSL 或 C#）。对于每个节点，我们都可以在 Inspector 面板进行选择来对其附加脚本。对于直接附加在节点上的脚本，可以认为是继承了对应节点类型的对象的脚本，例如附加在 KinematicBody2D 对象上的脚本即扩展（<code>extends</code>）了 KinematicBody2D。当然，在需要时，我们也可以在代码中通过 <code>preload()</code> 函数来载入我们自己的脚本。</p>
<p>Godot 引擎的执行逻辑也和场景树相关，详细的执行顺序逻辑可以在 <a href="https://docs.godotengine.org/en/stable/classes/class_node.html">Node</a> 文档中看到，下面是我们所关心的最常见的几个函数：</p>
<ul>
<li><code>_process(delta)</code>: 每个帧调用，与 fps 相关。</li>
<li><code>_physics_process(delta)</code>: 每个物理帧调用。</li>
<li><code>_ready()</code>: 游戏实例化场景树时，节点首次载入场景树中被调用。</li>
</ul>
<p>熟悉其它引擎或者自己写过类似的东西的话，自己猜也猜得到这些都是干嘛的了&hellip;当然实际我们这次只用到了 <code>_physics_process()</code>。</p>
<h3 id="特别基础的-gdscript-概览">特别基础的 GDScript 概览</h3>
<p>这次打算实现的东西也非常基础，只有这些：</p>
<ul>
<li>Variable Jump：按住以跳的更高。</li>
<li>Coyote Time：在玩家移动掉平台的一小段时间内按跳跃键仍然允许跳跃。</li>
<li>Buffer Jump：未落地但即将落地时按下跳跃，在着地瞬间起跳。</li>
</ul>
<p>&hellip;然而并不打算在这篇文章中讲这些基础操作应该怎样实现，如果你实在不知道，请参考项目的 <code>Player.gd</code> 文件。</p>
<p>对于这些功能，实际我们只要在逻辑理清楚的情况下，按照 Godot Script 的语法编写即可。其中一些玩家状态的检测我们自然使用了引擎所提供的功能，例如玩家是否在“地面”上，我们即直接使用了 <code>is_on_floor()</code> 实际行为则只需要我们之前正确配置了恰当的 Collition 就可以了。对于处理输入，我们使用 <code>Input.is_action_pressed(name)</code>, <code>Input.is_action_just_released()</code> 和 <code>Input.is_action_just_released(name)</code> 等获取按键的按下状态。当然，对于手柄摇杆等输入方式存在轻推等按下程度相关的情况，我们用 <code>Input.get_action_strength(name)</code> 即可。我们这次的实际场景即跳跃键使用前者，方向输入使用后者。最后我们知道可以用 <code>move_and_slide()</code> 移动 KinematicBody2D 玩家，就可以实现基本的玩家操作逻辑了。</p>
<p>当然，我们显然也会有在代码中访问当前节点之外的节点的需求，比如根据方向改变玩家 Sprite 的朝向等。我们即可使用 <code>$</code> 来访问场景树中的其它节点，例如可使用 <code>$Sprite</code> 访问相对此节点而言，此节点下的 Sprite 节点，也可使用 <code>$&quot;/root/World/TileMap&quot;</code> 来访问根节点下，<code>/World/TileMap</code> 路径所对应的节点。这种需求通常也伴随着需要我们所用来对应节点的变量在当前节点载入时即可用，我们即可以使用 <code>onready</code> 关键字标记变量何时就绪。</p>
<p>哦对了，最基础的一个东西，<code>print()</code> 是你要找的用来打 log 的函数。</p>
<h3 id="其它东西">其它东西</h3>
<p>以上就是基本的概览了，上面大致涵盖了基础的功能介绍和一些最常见的 GDScript 相关内容，如果你更习惯看一个不复杂的项目的文件并配合一些解释性的文字来熟悉这个引擎的工作流程来作为快速上手的方式的话，我应该提到了我觉得比较重要的大部分内容了。</p>
<p>这篇文章涵盖的内容自然也很少，就横板平台游戏而言，这里也有大量的很基础的内容没有涵盖，例如相机，Sprite 动画，例子效果，场景切换，UI 等内容，如果你感兴趣，可以考虑把玩一下，并在有兴趣和精力的情况也分享给其它人。尽管我非常清楚这篇文章压根没特别清楚的讲述任何地方的细节，但如果你对于此文章所涉及内容有任何疑问，也可考虑在 <a href="https://github.com/BearKidsTeam/planet-bkt-moe/discussions">讨论版</a> 中发帖讨论。</p>
<p>我其实目前有两次使用 Godot 的尝试了，另一次是在 <a href="https://www.blumia.net/2020/09/13/take-the-leap-devlog.html">这篇文章中</a> 提到过的临时用的 mapeditor。委实说，两次而言 Godot 所给我的体验是还算可以但不是特别出彩。就此例而言，Autotile 的配置编辑过程相比很繁琐，编辑碰撞区域是非常无聊的重复工作，对于所设 bitmask 未存在对应的 tile 时，绘制关卡时选取的填补块也是完全存粹的随机块。另一次体验则发现 GridMap 组件对于稍复杂的需求即不太能应付的过来，glTF 的支持程度也比较一般。不过 Godot 发展的时间并不长，加之非常宽松的许可协议以及开放源代码，以上问题对于确实想解决的情况下，即便官方不处理，也是可以自己上手改的。个人也留意了一段时间 Godot 社区的发展情况，目前看来也比较健康，于是相信目前存在的一些体验问题可以在后续的演进过程中解决吧。</p>
<p>最后祝大家，身体健康，再见。</p>
<p><em>以上内容可以在遵循 <a href="https://creativecommons.org/licenses/by-sa/4.0/legalcode">CC BY-SA 4.0</a> 共享协议的条件下随意使用。上述源码仓库内的源码不包含在此协议范围内，在对应源码仓库明确给出许可前，请遵循您所在地的法规限定的合理使用范畴下利用。</em></p>]]></content><category scheme="https://planet.bkt.moe/authors/blumia" term="blumia" label="BLumia"/><category scheme="https://planet.bkt.moe/tags/godot" term="godot" label="Godot"/></entry><entry><title type="html">Hello World！Planet BKT！</title><link href="https://planet.bkt.moe/posts/hello-world/?utm_source=atom_feed" rel="alternate" type="text/html" hreflang="en"/><id>https://planet.bkt.moe/posts/hello-world/</id><author><name>BLumia</name></author><published>2020-11-14T14:09:03+08:00</published><updated>2020-11-14T14:09:03+08:00</updated><content type="html"><![CDATA[<p>作为一个习惯了使用 RSS 订阅来查看一些喜欢的内容的订阅资源的用户，我早已有了自己的一些固有 RSS 订阅源以供使用，并且不断的在更新中。作为一个迫真 FSF 粉，自然也订阅了不少与自由软件相关的源，而 <a href="https://planet.kde.org/">Planet KDE</a>，<a href="https://planet.debian.org/">Planet Debian</a> 以及 <a href="https://planet.qt.io/">Planet Qt</a> 则是我的订阅源之一。透过方便的 RSS 订阅，使得我获取信息变得更加容易，而前阵子则突然让我意识到，类如上述所列的 RSS 聚合平台（RSS Aggregator）所具有的别的好处。</p>
<p>前一段时间的阅读中，偶然注意到一位博主在阅读<a href="https://www.kdab.com/there-and-back-again/">另一位博主所分享到 Planet KDE 的文章</a>后<a href="https://dantti.wordpress.com/2020/10/25/cutelyst-2-13-and-asql-0-19-released/">受其影响而完善了其所维护的项目并分享了其经验</a>。尽管阅读他人的知识共享并从中学得知识来提升自我本身就是阅读此类订阅的目的之一，但能够从订阅聚合平台看到其他人从别人的分享中取得收获并再次分享出来则体现了聚合平台的好处。聚合平台聚合了主题有一定相关性的文章，使得对此主题相关的人可以透过此聚合平台更方便的获取相关的文章而不是迷失在分散的个人博客中。对于乐于分享的个人博主，让自己的博客同时出现在聚合平台也可以提高文章的曝光度来使得更多的人可以阅读到其文章，也使得更多的关注者可以从中受益。</p>
<p>目前的 BKT 中，大家有时候会在相同或相近的方向上发展并分享自己的成果。例如在 Ballance 游戏 Modding 中已经倾注大量时间和心血的 yyc 等人的成果，又如开发了非常实用的自由软件但并不为多数人所知的 chris 的成果。而想到此，就想到其实聚合平台也可以一定程度上进一步推进这种成果的分享，一方面可以做到 BKT 之间的知识沉淀和内容聚合，一方面可以帮助各位小项目的曝光度，另一方面可以方便 BKT 之外的人也能受益于所分享的文章之中。</p>
<p>于是这就是 Planet BKT 存在的目的了。现在，我们有了一个聚合性质的文章分享平台，但究竟能否改善和推进各位项目的发展，以及能否使得更多人从中受益，就让我们拭目以待吧。</p>
<p><em>ps. 若要了解 Planet BKT 的使用方式，请<a href="https://github.com/BearKidsTeam/planet-bkt-moe">前往所对应的源代码仓库</a>。</em></p>]]></content><category scheme="https://planet.bkt.moe/authors/blumia" term="blumia" label="BLumia"/><category scheme="https://planet.bkt.moe/tags/%E6%9D%82%E8%B0%88" term="%E6%9D%82%E8%B0%88" label="杂谈"/></entry></feed>