<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>BLumia on Planet BKT</title><link>https://planet.bkt.moe/authors/blumia/</link><description>Recent content in BLumia on Planet BKT</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Fri, 11 Dec 2020 19:42:03 +0800</lastBuildDate><atom:link href="https://planet.bkt.moe/authors/blumia/index.xml" rel="self" type="application/rss+xml"/><item><title>使用 Godot 进行简单的横板平台游戏开发</title><link>https://planet.bkt.moe/posts/godot-simple-platformer/</link><pubDate>Fri, 11 Dec 2020 19:42:03 +0800</pubDate><guid>https://planet.bkt.moe/posts/godot-simple-platformer/</guid><description>游戏引擎有很多，适用于独立开发者进行 2d 游戏开发的也不少。Godot Engine 是一个关注已久的游戏引擎项目，有着非常宽松的授权许可（MIT）和看上去还不错的 2d 支持。一直以来想在有机会时做点东西出来，但又感觉真的想做时任何引擎都不熟悉也不是件好事，于是就打算试着使用 Godot 来开发一个简单的横板平台游戏原型来熟悉这个引擎。恰巧也有其它群友对 Godot 感兴趣，于是尽管我的了解程度还不多，也仍打算记录下一些研究过程和结果，以备后续自己查阅和它人参考。
下述的内容此处也附带了代码仓库链接，这里建议自己拉去仓库并打开，把玩之后再按照你在 Godot 中所看到的项目结构和写法来对照下方的文章，于是我也可以省点截图（
算不上概述的引擎概述 既然要使用引擎，那么自然希望引擎能够附带一些常用的功能而不再需要玩家自行实现或寻找解决方案。对于这次尝试的需求而言，Godot 有下面这些特性可用：
对 2d 像素游戏相对友好，支持直接的 pixel prefect 相机设置和资源导入。 内置 TileMap 以及 Autotile 支持。 相对很友好的 vcs 支持。 剩下的自然是一些几乎所有引擎都一定会提供的常用功能了。当然由于这篇文章并不是“教程”性质的文章，所以并不打算把文章提到的内容都详细讲清楚，如果你未曾用过 Godot，这里可以给你一些概览，具体的内容自然还是建议你优先考虑查阅文档。
Godot Engine 使用树形结构来描述场景内对象的层级关系，可以在 Scene 面板查看当前场景内的对象层级关系（场景树），选中其中的节点后也可以在 Inspector 和 Node 面板查看其对象属性和信号与组关系。在必要时，可以将一组节点作为一个新的场景保存，并在其它场景中实例化自己所保存的场景以便复用。
每个场景对象可以对应一个 tscn 文件，记录场景的结构和一些未单独保存的场景文件中的子节点数据。一个 Godot 工程对应一个 godot 扩展名的工程文件，记录了项目的各种参数配置，键位配置，默认场景等信息。由于 tscn 文件、godot 文件等涉及到的引擎相关大都是文本文件，于是相应的对 vcs 也很友好。
每个 Godot 项目对应一个目录（godot 文件所在的目录）作为项目目录，当把所支持的资源文件放置到项目目录下时，资源会被自动导入到项目中以供使用。已经导入的资源即可在 FileSystem 面板看到，并在代码中通过 res:// 协议的 url 进行访问，在 .import 目录也会有对应的数据生成（不需要 check-in 到 vcs 中）。导入会使用默认配置，当默认配置不符合需求时，则可以在文件视图中选取对应的文件，并在 Import 面板中调整设置并进行重新导入。</description></item><item><title>Hello World！Planet BKT！</title><link>https://planet.bkt.moe/posts/hello-world/</link><pubDate>Sat, 14 Nov 2020 14:09:03 +0800</pubDate><guid>https://planet.bkt.moe/posts/hello-world/</guid><description>&lt;p>作为一个习惯了使用 RSS 订阅来查看一些喜欢的内容的订阅资源的用户，我早已有了自己的一些固有 RSS 订阅源以供使用，并且不断的在更新中。作为一个迫真 FSF 粉，自然也订阅了不少与自由软件相关的源，而 &lt;a href="https://planet.kde.org/">Planet KDE&lt;/a>，&lt;a href="https://planet.debian.org/">Planet Debian&lt;/a> 以及 &lt;a href="https://planet.qt.io/">Planet Qt&lt;/a> 则是我的订阅源之一。透过方便的 RSS 订阅，使得我获取信息变得更加容易，而前阵子则突然让我意识到，类如上述所列的 RSS 聚合平台（RSS Aggregator）所具有的别的好处。&lt;/p></description></item></channel></rss>